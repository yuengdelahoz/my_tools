set exrc  "This option forces Vim to source .vimrc file if it present in working directory.
set secure "This option will restrict usage of some commands in non-default .vimrc files

set nocompatible			  " be iMproved, required
filetype off				  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

" " let Vundle manage Vundle, required
" Core Plugins
Plugin 'VundleVim/Vundle.vim' 
Plugin 'scrooloose/nerdtree.git'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'vim-latex/vim-latex'
Plugin 'lervag/vimtex'
Plugin 'StanAngeloff/php.vim'
Plugin 'elzr/vim-json'


" Color Scheme
Plugin 'dracula/vim'
Plugin 'vim-scripts/PapayaWhip'
Plugin 'flazz/vim-colorschemes'
Plugin 'vim-airline/vim-airline-themes'

" Auto Complete 
Plugin 'Valloric/YouCompleteMe'
"Plugin 'artur-shaik/vim-javacomplete2'
Plugin 'reedes/vim-pencil'


" Templates
"Plugin 'honza/vim-snippets'
"Plugin 'aperezdc/vim-template'

"Python Folding
Plugin 'tmhedberg/SimpylFold'

"SQL Formatter
Plugin 'vim-scripts/SQLUtilities'

call vundle#end()			 " required: All of your Plugins must be added before the following line

filetype plugin indent on	 " required
syntax on
set number	
set linebreak	
set textwidth=500	" Line wrap (number of cols)
set showmatch	" Highlight matching brace
set visualbell	" Use visual bell (no beeping)
 
set hlsearch	" Highlight all search results
set smartcase	" Enable smart-case search
set ignorecase	" Always case-insensitive
set incsearch	" Searches for strings incrementally
 

"" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler	" Show row and column ruler information

let mapleader = "\<Space>"
set backspace=2 

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <leader>k :wincmd k<CR>
nmap <silent> <leader>j :wincmd j<CR>
nmap <silent> <leader>h :wincmd h<CR>
nmap <silent> <leader>l :wincmd l<CR>

colorscheme dracula

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'


if $TERM_PROGRAM =~ "iTerm"
	 let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
	 let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

let g:EclimCompletionMethod = 'omnifunc'

"Pencil softwrap
let g:pencil#wrapModeDefault = 'soft'	" default is 'hard'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text,tex			call pencil#init()
augroup END

"let g:tex_flavor='xelatex'
"let g:Tex_CompileRule_pdf = 'xelatex --synctex=-1 -src-specials -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_DefaultTargetFormat='pdf'
"let g:Tex_MultipleCompileFormats='pdf,bibtex,pdf'
"let g:Tex_ViewRule_pdf =  'Preview -reuse-instance '

"setting default encoding to utf-8
set fileencodings=utf-8
set encoding=utf-8
set t_Co=256
set grepprg=grep\ -nH\ $*

"YouComplete key mappings
"Go to function definition
nnoremap <silent> <leader>gd :YcmCompleter GoToDefinition<CR>
"Go to variable declaration
nnoremap <silent> <leader>gv :YcmCompleter GoToDeclaration<CR>

"
"------------------------------------------------------------
" Indentation options
"
function! UseTabs()
	set list
	set listchars=tab:\|\ ,eol:$,lead:-
	set tabstop=4	  " Size of a hard tabstop (ts).
	set shiftwidth=4  " Size of an indentation (sw).
	set noexpandtab   " Always uses tabs instead of space characters (noet).
	"set autoindent	  " Copy indent from current line when starting a new line (ai).
	set copyindent
	set preserveindent
	echo "Using Tabs"
endfunction


function! UseSpaces()
	set list
	set listchars=tab:\|\ ,lead:.,eol:$
	"set autoindent    " Copy indent from current line when starting a new line (ai).
	set tabstop=4	  " Size of a hard tabstop (ts).
	set shiftwidth=4  " Size of an indentation (sw).
	set expandtab	  " Always uses spaces instead of tab characters (et).
	set softtabstop=4 " Number of spaces a <Tab> counts for. When 0, featuer is off (sts).
	set smarttab	  " Inserts blanks on a <Tab> key (as per sw, ts and sts).
	set copyindent
	set preserveindent
	echo "Using spaces"
endfunction

"To insert space characters whenever the tab key is pressed.
"set expandtab

"To change the number of space characters inserted for indentation
"set shiftwidth=4
"
"Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab>.
"set softtabstop=0
"
"To control the number of space characters that will be inserted when the tab key is pressed.
"set tabstop=4
"
" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on.*/

"set copyindent
"set preserveindent

call UseSpaces()

"------------------------------------------------------------
noremap <leader>s :call UseSpaces()<CR>
noremap <leader>t :call UseTabs()<CR>
